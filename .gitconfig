# ~/.gitconfig
#
# Github: https://raw.githubusercontent.com/allex/dotfiles/master/.gitconfig
#
# Allex's personal git config <http://iallex.com>
#
# NOTE: This is a common config file, localize config to `~/.gitconfig.local`
#
# Installation:
# sh> wget -O ~/.gitconfig https://git.io/vbrfa
#
# GistID: debabf5f064ceadb86aa025928e04aa4
# GistURL: https://gist.github.com/debabf5f064ceadb86aa025928e04aa4
# Last Modified: Wed Feb 07, 2018 18:09

[color]
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "status"]
  added = yellow
  changed = red
  untracked = cyan

[filter "tabspace"]
  clean = expand --tabs=4 --initial
  smudge = unexpand --tabs=4 --first-only

[alias]
  st = status --porcelain --ignore-submodules=dirty -s
  ci = commit
  br = branch
  co = checkout
  df = diff -b
  dt = difftool
  ls = ls-files
  amend = commit --amend
  pom = push origin master
  pl = pull --rebase
  rbc = rebase --continue
  l = log --stat --format=format:'"%C(yellow)%h %C(cyan)%an %C(blue)(%cn) %C(cyan)%ai\n%C(green)%s\n%b%N"'
  ll = log --stat --abbrev-commit
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold green)(%cr | %an)%Creset' --abbrev-commit --date=relative # --all --topo-order
  shlog = log --pretty=\"%Cgreen%h%Creset - %Cred%ci%Creset - %s (%Cred%an%Creset)\"
  fshow = !sh -c 'git show --pretty="format:" --name-only $1 | grep -v "^$" | uniq'
  vim   = !sh -c 'vim `git fshow $1`'
  mate  = !sh -c 'mate `git fshow $1`'
  subl  = !sh -c 'subl `git fshow $1`'
  merged = "!f(){ git branch -r --merged \"$1\" |grep -v '\\*\\|master\\|dev$' |sed 's#\\s*origin/##' |xargs -I{} -n 1 git for-each-ref --sort=committerdate refs/remotes/origin/{} --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'; };f"
  rmbranch = "!f(){ git branch -D ${1} && git push origin --delete ${1}; };f"
  rmtag = "!f(){ git tag -d ${1} && git push origin :${1}; };f"
  up = "!f(){ args=\"$@\"; [ -n \"$args\" ] || { args=\"origin `git rev-parse --abbrev-ref HEAD`\"; } ; git clean -nfX; git fetch --prune origin \"+refs/tags/*:refs/tags/*\" && git fetch -p && git remote update origin -p && git pull $args && git submodule update --init; git submodule foreach -q 'branch=\"$(git config -f $toplevel/.gitmodules submodule.$name.branch)\"; branch=${branch:-master}; git fetch origin -upfv +$branch:$branch && git checkout -f $branch'; };f"
  # privalige alias
  deploy = "!f(){ git-cli-deploy \"$@\"; };f"
  release = "!f(){ (:;export PATH="/usr/local/nodejs/bin/:$PATH";git-release \"$@\") };f"
  incoming = !sh -c 'git fetch && git log --graph --boundary --left-right --cherry-pick --decorate HEAD..FETCH_HEAD'
  outgoing = !sh -c 'git fetch && git log --graph --boundary --left-right --cherry-pick --decorate FETCH_HEAD..HEAD'
  i = "!f(){ [ -n \"$GIT_PREFIX\" ] && cd \"$GIT_PREFIX\"; git init && git add -A && git commit \"$@\"; };f"
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort

[core]
  # deactivate LF will be replaced by CRLF
  autocrlf = false

  # make git ignore white space differences, many different possibilites here
  # check http://www.kernel.org/pub/software/scm/git/docs/git-config.html#_variables
  whitespace = -trailing-space,-indent-with-non-tab,-tab-in-indent

  pager = less -R
  warnambiguousrefs = false
  excludesfile = ~/.gitignore
  ignore = dirty
  filemode = false

[branch]
  # always rebase when pulling
  autosetuprebase = always

[fetch]
  prune = true

[rebase]
  autosquash = true

[pull]
  rebase = true
  autosquash = true

[push]
  # Configure git push only your current branch when saying `git push`
  # <https://makandracards.com/makandra/8039-git-how-to-configure-git-to-push-only-your-current-branch>
  default = current

[merge]
  tool = vimdiff

[include]
  path = ~/.gitconfig.local
