#!/bin/bash

# Google Closure Compiler (GCC) Toolkit
# see https://github.com/allex/etc/blob/master/bin/closure

# Author: Allex (allex.wxn@gmail.com)
# Last Modified: Mon Feb 11, 2019 16:25

type java >/dev/null 2>&1 || { echo >&2 "Java not installed. Aborting."; exit 1; }

JAVA_LIB=$HOME/local/jars
COMPILER="$JAVA_LIB/compiler.jar"

[ -r "$COMPILER" ] || COMPILER="$LIB/compiler.jar"
[ ! -r $COMPILER ] && { echo "Error: Unable to access jarfile compiler.jar"; exit 1; }

GCC="java -Xms64m -Xmx128m -Djava.library.path=$JAVA_LIB -jar $COMPILER"

# for more see http://code.google.com/p/closure-compiler/wiki/Warnings
ARGS="--charset UTF-8 --language_in ECMASCRIPT5_STRICT"

usage() {
    $GCC $@;
}

# do some pre-compile syntax parsing
prebuild() {
    perl -0777 -i -pe 's/<debug>[\s\S]*?<\/debug>//g' $1
}

# create tmp file for dist
tempprefix=`basename $0`
TMPFILE=`mktemp -t ${tempprefix}.XXXXXX` || exit 1

# parse arguments, normalize closure params.
while [ $# -gt 0 ]; do
    case $1 in
        -h | --help)
            usage "$1"
            exit
            ;;

        -t | --warning_level)
            case $2 in
                QUIET | DEFAULT | VERBOSE)
                    ARGS="$ARGS $1 $2"
                    shift
                    ;;
                *) [ "$1" == "-t" ] && { ARGS="$ARGS --warning_level VERBOSE"; }
                    ;;
            esac
            ;;

        -s | --compilation_level)
            case $2 in
                WHITESPACE_ONLY | SIMPLE_OPTIMIZATIONS | ADVANCED_OPTIMIZATIONS)
                    ARGS="$ARGS $1 $2"
                    shift
                    ;;
                *) [ "$1" == "-s" ] && { ARGS="$ARGS --compilation_level ADVANCED_OPTIMIZATIONS"; }
                    ;;
            esac
            ;;

        -o | --js_output_file)
            ARGS="$ARGS --js_output_file $2"
            shift
            ;;

        *) v=$1;
            # Handle the un-prefixed arg to filename
            if [ "${v:0:1}" != "-" ]; then
                filename=$v;
                [ -f "$filename" ] && { cp $filename $TMPFILE; ARGS="$ARGS --js $TMPFILE"; }
            else
                ARGS="$ARGS $v $2"
                shift
            fi
            ;;
    esac
    shift
done

if [ "$ARGS" == "${ARGS/ --warning_level /}" ]; then
    ARGS="$ARGS --warning_level DEFAULT"
fi

# check input filepath or stdin mode
if [ $(expr "${ARGS}" : ".* --js .*") -eq 0 ]; then
    ARGS="${ARGS} --js $TMPFILE";
    tee $TMPFILE > /dev/null
fi

# compile target file
prebuild $TMPFILE
$GCC ${ARGS}

# remove tmp file
rm $TMPFILE;
