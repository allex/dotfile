#! /usr/bin/env node

/* vim: set ft=javascript: */
/*jslint adsafe: false, bitwise: true, browser: true, cap: false, css: false,
  debug: false, devel: true, eqeqeq: true, es5: false, evil: true,
  forin: false, fragment: false, immed: true, laxbreak: false, newcap: true,
  nomen: false, on: false, onevar: true, passfail: false, plusplus: true,
  regexp: false, rhino: true, safe: false, strict: true, sub: false,
  undef: true, white: false, widget: false, windows: false */
/*global process: false, require: false */

/**
 * Css beautify for nodejs
 * @author Allex Wang (allex.wxn@gmail.com)
 */
(function() {

    "use strict";

    var fs = require("fs"),
        sys = require("util"),
        http = require("http"),
        url = require("url"),
        csso = require("css-optimize"),
        options,
        result = "";

    function printUsage() {
        sys.puts([
            "Usage: node beautify-css.js [options] [file || URL || STDIN]",
            "",
            "Reads from standard input if no file or URL is specified.",
            "",
            "Options:",
            "-m\tBeautify mode, (default to 0)",
            "-h\tPrint this help",
            "",
            "Examples:",
            "  beautify-css -m 0 example.css",
            "  beautify-css < example.css",
            ""
        ].join("\n"));
    }

    function parseOpts(args) {
        var options = {},
            param;

        args.shift();
        args.shift();

        while (args.length > 0) {
            param = args.shift();

            if (param.substr(0, 1) === "-") {
                switch (param) {
                case "-m":
                    var mode = parseInt(args.shift(), 10);
                    options.mode = isNaN(mode) ? 0 : mode;
                    break;

                case "-h":
                    printUsage();
                    process.exit();
                    break;

                default:
                    console.error("Unknown parameter: " + param + "\nAborting.");
                    process.exit(0);
                }
            } else {
                options.source = param;
            }
        }

        return options;
    }

    function beautifySource(sourceFile) {
        var line,
            mode = options.mode,
            sourceFile = sourceFile.replace(/^\s+/, "");

        if (sourceFile && sourceFile[0] === "<") {
            sys.puts("HTML files not supported.");
            process.exit(0);
        } else {
            result = csso.cssOptimize(sourceFile, {mode: mode});
        }

        // Trying to output `result` in one go had funny side effects on OSX.
        // Writing to a file would work fine, but the raw console output (printed
        // on screen) was truncated.  Really weird.  So, line by line it is.
        result.split("\n").forEach(function(line, index, array) {
            sys.puts(line);
        });
    }

    function getSourceFile() {
        var req, sourceFile = "",
            sURL, stdin;

        if (options.source) {
            if (options.source.substring(0, 4) === "http") {

                // remote file
                sURL = url.parse(options.source);
                req = http.createClient((sURL.port || 80), sURL.host).request("GET", sURL.pathname + (sURL.search || ""), {
                    host: sURL.hostname
                });
                req.end();
                req.on("response", function(response) {
                    response.setEncoding("utf8");
                    response.on("data", function(chunk) {
                        sourceFile += chunk;
                    }).on("end", function() {
                        beautifySource(sourceFile);
                    });

                    // TODO: error handling
                });
            } else {

                // local file
                sourceFile = fs.readFileSync(options.source, "utf-8");
                beautifySource(sourceFile);
            }
        } else {

            // I'll be honest: I don't know yet how to check whether there is any
            // STDIN or not.  When the script is called w/o parameters, it should
            // print out usage information; when there's STDIN input, it should
            // process that.  So I figured that when there's no such input within
            // 25ms, there won't be anything later on, either.  If you know of a
            // cleaner way to do this, please let me know.  :)  --Carlo
            setTimeout(function() {
                if (sourceFile.length === 0) {
                    printUsage();
                    process.exit(1);
                }
            }, 25);

            stdin = process.openStdin();
            stdin.setEncoding("utf8");
            stdin.on("data", function(chunk) {
                sourceFile += chunk;
            }).on("end", function() {
                beautifySource(sourceFile);
            });
        }
    }

    options = parseOpts(process.argv);
    getSourceFile();

}());
